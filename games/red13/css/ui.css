// duplicate-load guard
if (window.__UI_LOADED__) {
  console.warn("UI loaded twice");
} else {
  window.__UI_LOADED__ = true;

/* -------------------------------------------------------
   Blue Zone Runner - ui.js (pure DOM, no innerHTML)
   ------------------------------------------------------- */

// === Safe DOM helpers (idempotent) ===
(function(){
  if (window.__BZR_SAFE_DOM__) return;
  window.__BZR_SAFE_DOM__ = true;

  window.safeStripTags = function(input){
    if (input == null) return "";
    return String(input).replace(/<[^>]*>/g,'');
  };

  window.safeSetText = function(el, text){
    if (!el) return;
    el.textContent = text == null ? "" : String(text);
  };

  window.safeSetHTML = function(el, htmlLike){
    if (!el) return;
    el.replaceChildren(document.createTextNode(window.safeStripTags(htmlLike)));
  };

  window.safeAppendText = function(parent, text){
    if (!parent) return;
    parent.appendChild(document.createTextNode(text == null ? "" : String(text)));
  };

  // === Safe trusted markup for internal HUD ===
  // Builds limited markup (<span>, <strong>, <em>) with no innerHTML usage.
  window.safeTrustedHTML = function (el, html) {
    if (!el) return;
    const fragment = document.createDocumentFragment();
    const allowedTags = ["span", "strong", "em"];
    const parts = String(html).split(/(<[^>]+>)/g);
    const stack = [fragment];

    for (const part of parts) {
      if (!part) continue;

      // closing tag
      if (part.startsWith("</")) {
        stack.pop();
        continue;
      }

      // opening tag
      const openMatch = part.match(/^<(\w+)[^>]*>$/);
      if (openMatch && allowedTags.includes(openMatch[1].toLowerCase())) {
        const tag = openMatch[1].toLowerCase();
        const node = document.createElement(tag);
        stack[stack.length - 1].appendChild(node);
        stack.push(node);
        continue;
      }

      // plain text
      if (!part.startsWith("<")) {
        stack[stack.length - 1].appendChild(document.createTextNode(part));
      }
    }

    el.replaceChildren(fragment);
  };
})();

// === UI Logic ===

window.updateHUD = function (hp, bp, gc) {
  const hpEl = document.getElementById("hudHP");
  const bpEl = document.getElementById("hudBP");
  const gcEl = document.getElementById("hudGC");

  // Safely generate limited formatted markup for HP
  let hpMarkup;
  if (hp <= 2) {
    hpMarkup = `<span class="low">${hp} HP</span>`;
  } else if (hp <= 25) {
    hpMarkup = `<span class="mid">${hp} HP</span>`;
  } else {
    hpMarkup = `<span class="ok">${hp} HP</span>`;
  }

  safeTrustedHTML(hpEl, hpMarkup);

  // BP & G-Coin plain numbers remain text-only
  if (bpEl) safeSetText(bpEl, `${bp} BP`);
  if (gcEl) safeSetText(gcEl, `${gc} GC`);
};

// other UI helpers can continue using safeSetText or safeSetHTML

} // end duplicate-load guard
